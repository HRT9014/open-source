--This file was generated using Luraph Obfuscator v13 .5 .8

return (function(tj, wj, lj, Mj, Jj, Rj, rj, yj, uj, Aj, Dj, Qj, aj, Cj, Uj, Fj, nj, pj, zj, Nj, Hj, mj, qj, Ej, dj, sj, Ij, Sj, Vj, Pj, Gj, K, ...) local a = (Mj); local G, Xj = setmetatable, (0X0); local L = Pj; local B, O = nil, nil; do repeat
    if
    Xj == 0 then B = aj; Xj = 1;
    continue;
    else O = sj;
    break; end; until false; end; local D = (Dj); local e = (mj); local k = Gj; local S = (dj); local E = (setfenv); Xj = 1; local g, M = nil, nil; do
        while Xj < 2 do
            if Xj ==
    0 then M = Sj; Xj = 2; do continue;
    end;
    else g = qj.byte; do Xj = 0;
    end;
    continue; end; end; end; local q, J, o, l, C, W = Jj, pj.yield, nil, nil, nil, nil; local w, d = {
        [0] = 1
    }, (rawget); local Z = type; local cj, s = {}, (string.match);
    for by = 0X00000, 0X3 do
        if not(by <= 0X0001)
    then
    if by~ = 2 then W = nj;
    continue;
    else C = Ej;
    continue; end;
    else if by~ = 0 then l = string.unpack;
    continue;
    else o = lj; end; end; end; local U = (C()); Xj = 0; local R, j, N = nil, nil, (nil);
    while Xj~ = 3 do
        if Xj <=
    0X0 then R = 0X0000100000000; Xj = 0X2;
    else if Xj~ = 0X1 then j = Cj.bor; Xj = 1;
    continue;
    else N = Uj; Xj = 3; do continue;
    end; end; end; end; Xj = 0X0000; local P, V = nil, nil;
    while Xj < 3 do
        if Xj <=
    0 then Xj = 0X2;
    else if Xj~ = 1 then P = qj.char; Xj = 1;
    elsej = 0X3; end; end; end; local Q = R - 1; Xj = 3; local A, b, I = nil, nil, nil; repeat do
        if not(Xj <= 0X1)
    then
    if Xj == 2 then b = Nj; Xj = 0X1;
    else Xj = 2; do continue;
    end; end;
    else if Xj~ = 0 then V = a(o(V, 0X5), "\046.", function(YS) do
            if g(YS, 0X002) ~ =
        72 then local Tm, pm = 1, (nil);
        while (true)
            do
                if Tm == 0 then
        if A then local vi = (nil); local yi = (0X0000);
        while (true)
            do
                if not(yi <= 0) then
        if yi~ = 1 then A = Vj; yi = 1;
        continue;
        else return vi; end;
        else vi = M(pm, A); do yi = 0X2;
        end; end; end;
        else return pm; end;
        break;
        else pm = P(W(YS, 0X10)); do Tm = 0;
        end; end; end;
        else local TV = 0X0;
        while (true)
            do
                if TV == 0 then A = W(o(YS, 0X1, 1)); do TV = 0x1;
        end;
        continue;
        else return ""; end; end; end; end; end); Xj = 0X000;
    else I = function() local on, ln = 2, (nil);
    while (true)
        do
            if on <= 0X0 then
    return ln;
    else if on~ = 0x01 then do ln = g(V, N, N);
    end; on = 1;
    else N = N + 1; on = 0; end; end; end; end;
    break; end; end; end; until false; local i, u, Bj, r, H, F, y = nil, nil, nil, nil, nil, nil, nil; do
        for kk = 0, 0X07 do
            if not(kk <= 3)
    then do
        if not(kk <= 5)
    then
    if kk~ = 6 then do y = function() local XC, zC, RC = 0, nil, (nil);
    do
        while -0X5c69D6Fe do
            if XC <=
    0 then do zC, RC = l("<i8", V, N);
    end; XC = 2;
    else if XC == 1 then
    return zC;
    else N = RC; XC = 0X1; end; end; end; end; end; end;
    continue;
    else
        do F = function() local Rk, Ak = nil, (nil);
        for F7 = 0, 2 do
            if F7 <= 0 then Rk, Ak = l("<I4", V, N);
    continue; elseif F7 == 1 then N = Ak;
    continue;
    else return Rk; end; end; end; end; end;
    else
        do
            if kk~ = 4 then do local cq = 0X0002;
    for Mx = 1, 0X01f do w[Mx] = cq;
    cq = cq * 0X02; end; end;
    else H = u - 1; end; end; end; end;
    else if kk <= 1 then do
        if kk ==
    0 then i = {
        0X003,
        0X2,
        1
    };
    else u = 0X80000000; do continue;
    end; end; end;
    else if kk~ = 0X2 then r = 0X02 ^ Aj;
    else Bj = {};
    continue; end; end; end; end; end; local m, p, X, t, z = nil, nil, nil, nil, (nil);
    for yP = 0, 4 do
        if yP <=
    0x0001 then do
        if yP~ =
    0 then do p = Fj;
    end;
    continue;
    else
        do m = Ij;
        end; end; end; elseif not(yP <= 0X02) then
    if yP == 0X3 then t = function() local mv = (1); local Dv, lv = nil, nil; repeat
    if not(mv <= 0X000) then
    if mv~ = 0X1 then N = lv; do mv = 0;
    end;
    else Dv, lv = l("\060\d", V, N); do mv = 2;
    end;
    continue; end;
    else
        do return Dv;
        end; end; until(false); end;
    continue;
    else
        do z = function(CP, cP, NP) local wP, QP = 0, (nil);
        repeat
    if wP <= 0 then QP = (CP / w[cP]) % w[NP]; do wP = 1;
    end;
    continue;
    else if wP~ = 0X001 then
    return QP;
    else QP = QP - QP % 1; do wP = 0X00002;
    end; do continue;
    end; end; end; until(false); end; end;
    continue; end;
    else X = uj; do continue;
    end; end; end; Xj = 0X2; local Y, T, v, x = nil, nil, nil, (nil);
    while Xj~ = 0X4 do
        if Xj <=
    1 then do
        if Xj~ =
    0 then do x = function() local dQ, kQ = 0, (0);
    repeat local nE = g(V, N, N); N = N + 0X1; dQ = j(dQ, Y(T(nE, 0x0007F), kQ));
    if T(nE, 128) ~ = 0X00000 then
    else return dQ; end; do kQ = kQ + 0X7;
    end; until false; end; end; Xj = 0X0004;
    else v = {
        [0X2] = 1485051352,
        [3] = -0X3A2B46d4,
        [0X6] = 'x\119\+\123\Q\(',
        [2] = rj,
        [3] = -1092309530,
        [0X7] = 0.1164824360665111,
        [Qj] = "x\055\107\}\Z",
        [0X6] = 0X2,
        [0] = 0.6099778602603644,
        [0x06] = 9,
        [0x0007] = 0X007,
        [0X0] = Hj,
        [4] = 0.3989237666888952,
        [0X3] = 0X4,
        [wj] = 0X9,
        [1] = 0X005,
        [0] = 3,
        [2] = 7,
        [zj] = 0X2,
        [0X4] = 1,
        [0X8] = 4
    }; do Xj = 0X1;
    end; do continue;
    end; end; end;
    else if Xj~ = 2 then do T = Rj;
    end; Xj = 0X0000;
    continue;
    else Y = bit32.lshift; Xj = 3;
    continue; end; end; end; local h = I(); local Kj = I(); do Xj = 3;
    end; local Oj, Lj, f, Wj, Zj = nil, nil, nil, nil, (nil);
    while true do
        if not(Xj <= 1)
    then
    if not(Xj <= 2) then
    if Xj~ = 3 then Zj = 1;
    break;
    else Oj = function(Qr) local Nr = (0X4); local xr, Pr, jr, Sr, lr = nil, nil, nil, nil, nil; do
        while "\062/\066"
    do
        if Nr <=
    3 then
    if Nr <= 0X0001 then do
        if Nr ==
    0 then do Pr = X(xr[1], Kj);
    end; Nr = 0X6;
    else Kj = (9 * Kj + Qr) % 256; Nr = 7; end; end;
    else if Nr == 2 then Sr = X(xr[3], Kj); Nr = 0X3;
    else lr = X(xr[0X00004], Kj); Nr = 0X1; end; end; elseif Nr <= 5 then
    if Nr == 0X4 then xr = {
        g(V, N, N + 3)
    }; Nr = 0; do continue;
    end;
    else
        do return lr * 16777216 + Sr * 0X000010000 + jr * 256 + Pr;
        end; end;
    else
        do
            if Nr~ = 0X6 then N = N + 0X0004; Nr = 0X5;
    continue;
    else
        do jr = X(xr[2], Kj);
        end; do Nr = 2;
    end;
    continue; end; end; end; end; end; end; Xj = 0X00000;
    continue; end;
    else Wj = function(...) do return L('\#', ...), {
            ...
        };
        end; end; Xj = 4;
    continue; end;
    else
        do
            if Xj == 0 then do Lj = function(TM) local zM = (F());
    local qM = 0; local bM = (nil);
    while qM < 3 do
        if not(qM <= 0)
    then
    if qM~ = 1 then N = N + zM; qM = 0X3;
    continue;
    else
        for W0 = 0x0001, zM, 7997 do local M0, U0 = 0X0002, (nil);
        local q0 = (W0 + 7997 - 1); repeat
    if M0 <= 0X1 then
    if M0~ = 0 then
    for Q7 = 0x1, #U0 do U0[Q7] = X(U0[Q7], h);
    h = (TM * h + 0X000FB) % 0x100; end; M0 = 0X00000;
    else bM = bM..P(p(U0)); M0 = 0x04;
    continue; end;
    else
        do
            if M0 == 0X2 then
    if not(q0 > zM) then
    else q0 = zM; end; M0 = 3;
    else
        do U0 = {
            g(V, N + W0 - 1, N + q0 - 0X1)
        };
        end; do M0 = 0X1;
    end; end; end; end; until M0 == 4; end; qM = 0X2; end;
    else bM = ""; do qM = 0X001;
    end; end; end; do return bM;
    end; end; end; Xj = 0X01;
    continue;
    else
        do f = function() local gE, xE = 0x00000, nil;
        do repeat do
            if not(gE <= 0) then
    if gE == 1 then
    if not(xE > H) then
    else return xE - R; end; gE = 2;
    else return xE; end;
    else xE = x(); gE = 1; do continue;
    end; end; end; until false; end; end; end; Xj = 2;
    continue; end; end; end; end; do Xj = 2;
    end; local kj, oj = nil, nil; repeat do
        if not(Xj <= 0X0)
    then
    if Xj == 1 then
    function oj() local Lx, kx, lx, Px, Jx, fx, vx, bx, Ix = 0X9, nil, nil, nil, nil, nil, nil, nil, nil;
    while Lx < 15 do
        if Lx <=
    6 then
    if Lx <= 0X2 then
    if Lx <= 0X0 then
    for kD = 1, x() do Px[kD] = {
        I(),
        x()
    };
    end; Lx = 13;
    else if Lx~ = 0X1 then lx[16] = F(); do Lx = 0X003;
    end;
    else bx = F() - 0X928A; Lx = 6; end; end;
    else
        do
            if Lx <= 0x04 then do
        if Lx ==
    3 then do Jx = lx[0x007];
    end; do Lx = 7;
    end; do continue;
    end;
    else Px = {}; do Lx = 12;
    end; end; end;
    else
        do
            if Lx~ = 5 then do Ix = I();
    end; Lx = 0x00f;
    else(lx)[2] = Px; Lx = 0;
    continue; end; end; end; end; end; elseif Lx <= 10 then
    if not(Lx <= 0X8) then do
        if Lx ==
    9 then Lx = 14;
    continue;
    else vx = {}; Lx = 8; do continue;
    end; end; end;
    else if Lx == 7 then fx = F() - 0X8ff6; Lx = 10;
    else
        for F5 = 0X1, fx do
            do Jx[F5] = {
                [7] = 0.7031714872724542,
                [0X2] = "",
                [yj] = 1312550395,
                [6] = 0.09829684988309284,
                [0X2] = false,
                [4] = I(),
                [0X007] = I(),
                [0X006] = x(),
                [1] = f(),
                [0X5] = I(),
                [yj] = f(),
                [0X2] = f()
            };
            end;
        end; Lx = 0X1; do continue;
    end; end; end;
    else if Lx <= 12 then
    if Lx~ = 0xB then lx[0x13] = I(); Lx = 5;
    else lx = {
        nil,
        nil,
        Vj,
        nil,
        nil,
        Vj,
        {},
        {},
        {}
    }; Lx = 4; do continue;
    end; end;
    else
        do
            if Lx~ = 13 then kx = {}; do Lx = 11;
    end;
    else lx[0x0012] = I(); Lx = 2; end; end; end; end; end; local Rx, gx = nil, (nil);
    for yk = 0X0, 0X1 do
        if yk~ =
    0 then gx = I() ~ = 0X00000;
    continue;
    else Rx = 0x1;
    continue; end; end; do Lx = 0X0;
    end; repeat
    if Lx~ = 0 then do(lx)[0X6] = x();
    end; do Lx = 0x2;
    end;
    continue;
    else
        do
            for ns = 0X01, bx do local Js = 7;
            local Vs, gs, Es = nil, nil, (nil);
        do
            while Js <= 7 do
                if Js <= 3 then
    if Js <= 0X1 then
    if Js~ = 0 then gs = I(); Js = 0X0006;
    continue;
    else Es = {
        Vs,
        {}
    }; do Js = 3;
    end;
    continue; end;
    else if Js~ = 0X0002 then vx[Rx] = Es; Js = 5;
    continue;
    else if gx then(Bj)[Zj] = Es; Zj = Zj + 0X1; end; Js = 8; end; end;
    else if not(Js <= 0X5) then
    if Js~ = 6 then Vs = nil; Js = 0X001; do continue;
    end;
    else kx[ns - 1] = Rx; do Js = 0X4;
    end; end;
    else if Js~ = 4 then Rx = Rx + 0x001; Js = 0x02;
    else if gs == 0x80 then Vs = o(Lj(Ix), F()); elseif gs == 0xa5 then Vs = t(); elseif gs == 187 then Vs = tj; elseif gs == 0X00E8 then do Vs = o(Lj(Ix), 5);
    end; elseif gs == 43 then Vs = F(); elseif gs == 222 then Vs = rj; elseif gs == 192 then do Vs = o(Lj(Ix), 0X002);
    end; elseif gs == 0x1f then Vs = y(); elseif gs == 26 then do Vs = t();
    end; elseif gs~ = 33 then
    else Vs = o(Lj(Ix), I()); end; do Js = 0;
    end; end; end; end; end; end; end; end; Lx = 1;
    continue; end; until Lx >= 2; lx[18] = I(); local Qx = lx[9]; Lx = 0X1; local hx = (nil);
    while 887257286 do
        if not(Lx <= 1)
    then do
        if not(Lx <= 2)
    then do
        if Lx~ =
    0X3 then(lx)[5] = x();
    break;
    else(lx)[13] = I(); Lx = 4; end; end;
    else lx[0XB] = I(); Lx = 3;
    continue; end; end;
    else if Lx == 0 then
    for z6 = 0, hx - 1 do(Qx)[z6] = oj();
    end; Lx = 2;
    else hx = F() - 0X14070; Lx = 0;
    continue; end; end; end; local xx = (nil);
    for DP = 0, 0X00001 do
        if DP ==
    0x000 then xx = I();
    continue;
    else(lx)[0X001] = z(xx, 0X01, 1) ~ = 0x00; end; end; do Lx = 0X004;
    end;
    while 94591879 do
        if Lx <=
    0X0001 then do
        if Lx~ =
    0 then
    return lx;
    else
        for JP = Uj, fx do local MP = (0X000);
        local cP = nil;
    while MP < 0X002 do
        do
            if MP ==
    0X000 then cP = lx[0x007][JP]; MP = 0X1;
    else
        for pw, ow in ipairs(i) do local Zw = (1);
        local zw, Cw = nil, (nil); repeat
    if Zw == 0 then Cw = cP[zw]; Zw = 2; do continue;
    end;
    else zw = v[ow]; Zw = 0; do continue;
    end; end; until Zw >= 0x2;
    if Cw == 0X7 then local il, dl, Il = 2, nil, (nil);
    while il <= 0X002 do
        if not(il <= 0X000)
    then
    if il == 1 then do
        if not(Il)
    then
    else local gQ = nil;
    for XH = 0, 0X1 do
        if XH ==
    0x0000 then(cP)[zw] = Il[1];
    else gQ = Il[0X002];
    continue; end; end; gQ[#gQ + 0x1] = {
        cP,
        zw
    }; end; end; il = 0X3;
    continue;
    else
        do dl = kx[cP[ow]];
        end; do il = 0X0000;
    end;
    continue; end;
    else Il = vx[dl]; il = 1;
    continue; end; end;
    else if Cw == 10 then cP[ow] = JP + cP[ow] + 0X1; end; end; end; MP = 2;
    continue; end; end; end; end; do Lx = 0X1;
    end; end; end;
    else
        do
            if not(Lx <= 2) then do
        if Lx ==
    3 then lx[12] = I(); Lx = 2;
    continue;
    else(lx)[0x3] = z(xx, 2, 1) ~ = 0; do Lx = 3;
    end; end; end;
    else
        do(lx)[wj] = x();
        end; Lx = 0X0000; end; end; end; end; end; do Xj = 0X00003;
    end;
    else Xj = 0x0; do continue;
    end; end;
    else
    function kj(SL, qL, TL) local WL = (TL[0X6]); local RL = TL[0x007]; local vL, pL, mL, PL, cL = TL[5], TL[8], TL[0X001], TL[0x3], (TL[0X004]); local uL = TL[9]; local AL = (G({}, {
        __mode = "v"
    })); local IL = (nil); IL = function(...) local Jo, mo = 0X1, {}; local Io = (0); local fo = C(); local Ao = ({
        [0x001] = mo,
        [2] = TL
    }); local uo, vo = Wj(...); local Vo = (fo == U and qL or fo); uo = uo - 1; do
        for bf = 0X0, uo do
            do
                if WL >
    bf then(mo)[bf] = vo[bf + 0X0001];
    else break; end; end; end; end;
    if not mL then vo = nil;
    else if not(PL) then
    else
        do(mo)[WL] = {
            n = uo >= WL and uo - WL + 0X01 or 0X0,
            p(vo, WL + 1, uo + 1)
        };
        end; end; end;
    if Vo == fo then
    else E(IL, Vo); end;
    while -88599124 do local ai = (RL[Jo]);
    local ti = ai[6]; do Jo = Jo + 1;
    end;
    if not(ti < 50) then
    if ti < 75 then
    if ti >= 62 then
    if ti < 68 then
    if ti < 65 then
    if ti >= 0X3f then do
        if ti ==
    64 then do mo[ai[1]] = mo[ai[0X3]] % ai[7];
    end;
    else
        do
            if ai[2] ~ = 211 then do repeat local lx, Vx = AL, mo;
    do
        if #lx >
    0 then local vR = {};
    for o_, t_ in q, lx do
        for HD, ID in q, t_ do
            do
                if not(ID[0X001] == Vx and ID[0x2] >= 0)
    then
    else local zl = ID[2];
    if not vR[zl] then do(vR)[zl] = {
        Vx[zl]
    };
    end; end; ID[0X1] = vR[zl];
    (ID)[0X2] = 0X1; end; end; end; end; end; end; until true; end;
    return p(mo, ai[0x001], Io);
    else Jo = Jo - 0X1; RL[Jo] = {
        [0X6] = 0X2f,
        [1] = (ai[0X0001] - 0XbD),
        [3] = (ai[0x003] - 0X0000Bd)
    }; end; end; end; end;
    else local ur = (ai[1]); local Tr = mo[ai[0x0003]]; mo[ur + 0X1] = Tr; mo[ur] = Tr[ai[0X00007]]; end;
    else if not(ti < 0X42) then
    if ti~ = 67 then do(mo)[ai[1]] = mo[ai[3]] < ai[7];
    end;
    else(mo)[ai[0x1]] = Ao[ai[0X0003]]; end;
    else if mo[ai[3]] == ai[0X007] then Jo = ai[1]; end; end; end;
    else if ti >= 71 then
    if ti < 73 then do
        if ti~ =
    0x048 then do(cj)[ai[0x3]] = mo[ai[1]];
    end;
    else(mo)[ai[1]] = false; end; end;
    else if ti~ = 74 then(mo)[ai[0X1]] = mo[ai[0x3]] * mo[ai[2]];
    else
        do Jo = ai[3];
        end; end; end;
    else if not(ti < 0X45) then
    if ti~ = 70 then mo[ai[0X1]] = mo[ai[0x0003]] <= mo[ai[0X2]];
    else repeat local iN, hN = AL, (mo);
    if #iN > 0X0 then local s4 = {}; do
        for DA, MA in q, iN do
            for xp, Op in q, MA do
                if not(Op[1] == hN and Op[0X2] >= 0X0)
    then
    else local eT = (Op[2]);
    if not(not s4[eT]) then
    else s4[eT] = {
        hN[eT]
    }; end; Op[0X1] = s4[eT]; do(Op)[0X2] = 1;
    end; end; end; end; end; end; until true; local Uf = ai[1]; do return mo[Uf](p(mo, Uf + 0X0001, Io));
    end; end;
    else local Oe = (ai[0X1]); local ve, ce = mo[Oe], (ai[0X0002] - 1) * 50;
    for rs = 0x0001, Io - Oe do ve[ce + rs] = mo[Oe + rs];
    end; end; end; end;
    else if ti >= 56 then
    if ti >= 0X3b then do
        if not(ti >= 0x0003c)
    then do mo[ai[1]] = mo[ai[3]] / ai[7];
    end;
    else if ti == 61 then local cT = ai[1]; local AT = S(function(...)(J)();
        for tC in ...do(J)(true, tC);
        end; end);
    (AT)(mo[cT], mo[cT + 1], mo[cT + 0X00002]); Io = cT;
    (mo)[cT] = AT; Jo = ai[0X3];
    else
        do mo[ai[0X1]] = X(mo[ai[3]], mo[ai[2]]);
        end; end; end; end;
    else if not(ti < 0X39) then
    if ti == 58 then local VP = (ai[0x3]);
    (mo)[ai[0X1]] = mo[VP]..mo[VP + 1];
    else(mo[ai[0X00001]])[mo[ai[3]]] = ai[0X7]; end;
    else(mo)[ai[0X001]] = cj[ai[0X003]]; end; end; elseif not(ti < 0X35) then
    if ti < 0X036 then local hF = ai[1]; Io = hF + ai[3] - 0X00001;
    (mo[hF])(p(mo, hF + 1, Io)); Io = hF - 1;
    else if ti == 0X000037 then do mo[ai[1]] = true;
    end;
    else
        for Oz = ai[0X1], ai[0X3] do mo[Oz] = nil;
        end; end; end;
    else if not(ti < 0X0033) then do
        if ti ==
    0X34 then do(mo)[ai[1]] = mo[ai[3]] < mo[ai[0X02]];
    end;
    else mo[ai[1]] = mo[ai[0X3]] ^ mo[ai[0X02]]; end; end;
    else mo[ai[1]] = mo[ai[3]] > mo[ai[0X2]]; end; end; end;
    else if not(ti < 0X57) then
    if not(ti >= 0x5d) then
    if not(ti >= 0X05A) then
    if not(ti < 0x58) then
    if ti == 89 then(mo)[ai[0X001]] = mo[ai[3]] + mo[ai[0X002]];
    else
        do(mo)[ai[0X00001]] = Y(mo[ai[3]], mo[ai[2]]);
        end; end;
    else(mo)[ai[1]] = mo[ai[0X3]] ~ = mo[ai[0X2]]; end;
    else if not(ti >= 0x5b) then do
        if mo[ai[3]] ==
    mo[ai[0X00002]] then
    else
        do Jo = ai[1];
        end; end; end;
    else if ti == 0x5C then mo[ai[1]][ai[4]] = mo[ai[0x0002]];
    else local Rv = (ai[1]); local nv, kv = mo[Rv]();
    if not(nv) then
    else Jo = ai[0x3]; do(mo)[Rv + 0X03] = kv;
    end; end; end; end; end;
    else
        do
            if not(ti < 0X00060) then
    if not(ti < 98) then
    if ti == 99 then do Io = ai[1];
    end; mo[Io](); do Io = Io - 0X001;
    end;
    else repeat local xO, iO = AL, mo;
    if #xO > 0 then local Rv = ({}); do
        for c8, z8 in q, xO do
            do
                for DP, gP in q, z8 do
                    if not(gP[1] == iO and gP[2] >= 0x00000)
    then
    else local LY = (gP[2]);
    if not Rv[LY] then do Rv[LY] = {
        iO[LY]
    };
    end; end; do gP[0x1] = Rv[LY];
    end; gP[0X2] = 1; end; end; end; end; end; end; until 0.46937579183755906;
    return; end;
    else
        do
            if ti~ = 0X00061 then do
        if mo[ai[3]] ==
    ai[0X7] then
    else Jo = ai[0X1]; end; end;
    else
        do mo[ai[0X01]] = -mo[ai[3]];
        end; end; end; end;
    else
        do
            if not(ti < 94) then
    if ti~ = 95 then local ZG = (ai[0X01]); local TG = S(function(...)(J)();
        for X0, A0 in ...do(J)(true, X0, A0);
        end; end);
    (TG)(mo[ZG], mo[ZG + 1], mo[ZG + 2]); Io = ZG;
    (mo)[ZG] = TG; Jo = ai[3];
    else local cX = (ai[0X1]); do
        for bu = cX, cX + (ai[3] - 0X1) do mo[bu] = vo[WL + (bu - cX) + 0x00001];
        end;
    end; end;
    else(mo)[ai[1]] = ai[4]; end; end; end; end; end;
    else
        do
            if not(ti >= 81) then do
        if not(ti < 78)
    then
    if not(ti < 0X4f) then
    if ti~ = 0X050 then do mo[ai[0X1]] = mo[ai[0X3]] + ai[7];
    end;
    else local jL, eL = ai[0x01], ai[3];
    if eL~ = 0 then do Io = jL + eL - 1;
    end; end; local CL, fL = nil, (nil); local XL = ai[0x2];
    if eL == 0X1 then CL, fL = Wj(mo[jL]());
    else CL, fL = Wj(mo[jL](p(mo, jL + 0X1, Io))); end;
    if XL~ = 0X001 then
    if XL == 0 then CL = CL + jL - 1; Io = CL;
    else
        do CL = jL + XL - 0X0002;
        end; Io = CL + 0X01; end; local RA = (0); do
        for g0 = jL, CL do RA = RA + 0x1;
        do(mo)[g0] = fL[RA];
        end;
    end; end;
    else Io = jL - 0X1; end; end;
    else
        do
            if ai[0x2] == 235 then Jo = Jo - 1; RL[Jo] = {
        [0X3] = (ai[3] - 0XB1),
        [0x0001] = (ai[0X01] - 177),
        [6] = 27
    }; elseif ai[0x2] ~ = 6 then repeat local DW, iW, HW = AL, mo, ai[1];
    if not(#DW > 0X00000) then
    else local Og = {};
    for WZ, LZ in q, DW do
        for CM, mM in q, LZ do
            if mM[0x1] ==
    iW and mM[0X2] >= HW then local oZ = mM[2];
    if not Og[oZ] then Og[oZ] = {
        iW[oZ]
    }; end; mM[1] = Og[oZ]; mM[2] = 0x01; end; end; end; end; until true;
    else Jo = Jo - 1; RL[Jo] = {
        [0X1] = (ai[1] - 19),
        [0X00006] = 0,
        [0X00003] = (ai[0X00003] - 0X13)
    }; end; end; end;
    else
        do
            if not(ti >= 76) then local xb = (ai[1]); Io = xb + ai[0x0003] - 1; do(mo)[xb] = mo[xb](p(mo, xb + 1, Io));
    end; Io = xb;
    else if ti~ = 0X4d then mo[ai[1]] = mo[ai[0x3]] / mo[ai[2]];
    else
        do(mo[ai[1]])[ai[0x4]] = ai[7];
        end; end; end; end; end; end; elseif ti >= 84 then
    if ti < 85 then Io = ai[0X01];
    (mo)[Io] = mo[Io]();
    else if ti~ = 0X56 then local X2, F2 = uo - WL, ai[0X1];
    if X2 < 0X0 then X2 = -0X1; end;
    for Tl = F2, F2 + X2 do(mo)[Tl] = vo[WL + (Tl - F2) + 1];
    end; Io = F2 + X2;
    else mo[ai[1]] = mo[ai[3]] >= mo[ai[0X002]]; end; end;
    else
        do
            if not(ti < 0X52) then do
        if ti~ =
    83 then(mo)[ai[1]] = mo[ai[0X3]] * ai[7];
    else mo[ai[0X1]] = e(mo[ai[0x3]]); end; end;
    else local dh = ai[1]; mo[dh](p(mo, dh + 0x1, Io)); do Io = dh - 0x1;
    end; end; end; end; end; end; end;
    else if not(ti >= 25) then do
        if not(ti >= 12)
    then
    if ti < 0X6 then
    if ti >= 0X3 then
    if ti >= 4 then
    if ti~ = 0X5 then
    if ai[2] == 173 then Jo = Jo - 1; do(RL)[Jo] = {
        [1] = (ai[1] - 150),
        [6] = 11,
        [3] = (ai[0X3] - 0x096)
    };
    end;
    else if not(mo[ai[1]]) then
    else Jo = ai[3]; end; end;
    else
        do repeat local u4, T4 = AL, (mo);
        if not(#u4 > 0X0000) then
    else local p2 = {};
    for BJ, RJ in q, u4 do
        for Vy, Oy in q, RJ do
            if Oy[0X1] ==
    T4 and Oy[2] >= 0 then local nr = Oy[0X2];
    if not p2[nr] then p2[nr] = {
        T4[nr]
    }; end; Oy[1] = p2[nr];
    (Oy)[2] = 1; end; end; end; end; until true; end; local EW = (ai[1]);
    return p(mo, EW, EW + ai[0X3] - 0X2); end;
    else mo[ai[0X00001]] = j(mo[ai[0x3]], mo[ai[0X2]]); end;
    else
        do
            if ti < 1 then do
        if ai[0X00002] ==
    10 then do Jo = Jo - 0X1;
    end;
    (RL)[Jo] = {
        [0X00006] = 0X5,
        [1] = (ai[0x001] - 0x018),
        [3] = (ai[3] - 0X018)
    };
    else
        do mo[ai[0X1]] = mo[ai[0X3]];
        end; end; end;
    else if ti~ = 2 then
    if ai[0X2] == 0XD5 then do Jo = Jo - 1;
    end;
    (RL)[Jo] = {
        [6] = 5,
        [0X03] = (ai[0X003] - 237),
        [0X1] = (ai[1] - 0Xed)
    }; elseif ai[2] == 191 then Jo = Jo - 0x1; RL[Jo] = {
        [3] = (ai[0x3] - 0X024),
        [0x6] = 0X000,
        [1] = (ai[1] - 0X24)
    };
    else(mo)[ai[0X1]] = vo[WL + 1]; end;
    else mo[ai[0X00001]] = mo[ai[3]] - ai[7]; end; end; end; end;
    else if not(ti < 9) then do
        if not(ti < 10)
    then
    if ti == 11 then
    if ai[2] == 0X000d2 then Jo = Jo - 1; RL[Jo] = {
        [1] = (ai[0X1] - 0X031),
        [0X3] = (ai[3] - 0X31),
        [6] = 97
    }; elseif ai[2] ~ = 253 then do mo[ai[0X1]] = nil;
    end;
    else Jo = Jo - 1; do(RL)[Jo] = {
        [0x6] = 0X55,
        [3] = (ai[3] - 213),
        [1] = (ai[0X1] - 213)
    };
    end; end;
    else local PE = (ai[1]); local yE, XE, RE = mo[PE]();
    if not(yE) then
    else mo[PE + 1] = XE; mo[PE + 0X02] = RE; Jo = ai[3]; end; end;
    else if not(not mo[ai[1]]) then
    else
        do Jo = ai[0X0003];
        end; end; end; end;
    else if not(ti < 0x07) then do
        if ti ==
    8 then(mo)[ai[1]] = ai[0x00004];
    else if not(mo[ai[3]] <= mo[ai[0X2]]) then do Jo = ai[0X1];
    end; end; end; end;
    else local xC = (ai[1]); local QC, LC = mo[xC]();
    if QC then do
        for lM = 1, ai[0X2] do
            do mo[xC + lM] = LC[lM];
            end;
        end;
    end; Jo = ai[3]; end; end; end; end;
    else if not(ti < 18) then do
        if not(ti >= 21)
    then
    if not(ti >= 19) then local AY = ai[0X01]; mo[AY](mo[AY + 1]); do Io = AY - 0X00001;
    end;
    else if ti == 0x14 then do
        if mo[ai[0X3]] ~ =
    mo[ai[2]] then
    else Jo = ai[0x1]; end; end;
    else local qb = ai[0x001]; mo[qb](mo[qb + 1], mo[qb + 2]); Io = qb - 0x1; end; end;
    else if not(ti < 23) then do
        if ti ==
    24 then local TD = ai[1]; local YD = mo[TD + 1]; local lD = (mo[TD + 0X2]); local yD = mo[TD]; do mo[TD] = S(function() for iD = yD, YD, lD do J(true, iD);
        end; end);
    end; Jo = ai[0X3];
    else
        do
            if not(mo[ai[0X0003]] < mo[ai[0x2]]) then Jo = ai[0X00001]; end; end; end; end;
    else
        do
            if ti~ = 22 then do
        if not(mo[ai[3]] < mo[ai[2]])
    then
    else Jo = ai[1]; end; end;
    else local tu = (ai[0X0001]); local qu, Nu = mo[tu]();
    if qu then mo[tu + 0X01] = Nu; Jo = ai[3]; end; end; end; end; end; end;
    else
        do
            if not(ti < 0X0f) then
    if ti < 16 then local wR = (SL[ai[3]]); mo[ai[1]] = wR[1][wR[2]];
    else if ti~ = 0X11 then local PO = SL[ai[3]]; PO[0X1][PO[0X002]] = mo[ai[1]];
    else local ao = mo[ai[0X3]] / mo[ai[0x2]];
    (mo)[ai[1]] = ao - ao % 1; end; end;
    else if not(ti < 0XD) then
    if ti == 0XE then do mo[ai[1]] = mo[ai[3]] == mo[ai[2]];
    end;
    else local Ib = (uL[ai[0X3]]); local Zb, Yb = Ib[0X2], nil; local vb = #Zb; do
        if not(vb > 0X0)
    then
    else Yb = {}; do
        for aw = 0X001, vb do local Ww = Zb[aw];
        if Ww[1] ==
    0X0000 then(Yb)[aw - 1] = {
        mo,
        Ww[2]
    };
    else Yb[aw - 0X1] = SL[Ww[2]]; end; end; end;
    (D)(AL, Yb); end; end;
    (mo)[ai[0X1]] = kj(Yb, Vo, Ib); end;
    else mo[ai[0X1]] = mo[ai[3]] ~ = ai[0X07]; end; end; end; end; end; end;
    else if ti >= 0X25 then
    if ti < 0X002B then
    if ti >= 40 then
    if not(ti < 41) then do
        if ti ==
    42 then repeat local pP, PP = AL, (mo); do
        if #pP >
    0 then local Fc = {};
    for PM, kM in q, pP do
        for wr, er in q, kM do
            if er[1] ==
    PP and er[0X2] >= 0X0 then local hC = (er[0X2]);
    if not Fc[hC] then Fc[hC] = {
        PP[hC]
    }; end; er[0x1] = Fc[hC]; do er[0x00002] = 1;
    end; end; end; end; end; end; until true;
    return mo[ai[1]]();
    else(mo)[ai[0x1]] = {
        p({}, 0X1, ai[3])
    }; end; end;
    else local sp = (ai[0X0001]); local Op = S(function(...) J();
        for co, Fo, Uo, ro, go, so, jo, Qo, Ho, Wo in ...do(J)(true, {
            co,
            Fo,
            Uo,
            ro,
            go,
            so,
            jo,
            Qo,
            Ho,
            Wo
        });
        end; end);
    (Op)(mo[sp], mo[sp + 1], mo[sp + 2]); Io = sp; mo[sp] = Op; do Jo = ai[3];
    end; end;
    else if ti >= 38 then
    if ti == 0x27 then(mo)[ai[1]] = mo[ai[0X3]][mo[ai[2]]];
    else(mo)[ai[0X1]] = mo[ai[0X3]] - mo[ai[2]]; end;
    else
        do(Vo)[ai[4]] = mo[ai[1]];
        end; end; end;
    else
        do
            if ti >= 46 then do
        if ti >=
    0X30 then
    if ti~ = 49 then local Y5 = (ai[0X00001]);
    (mo)[Y5] = mo[Y5](mo[Y5 + 1]); Io = Y5;
    else(Ao)[ai[3]] = mo[ai[1]]; end;
    else if ti == 47 then repeat local M9, u9 = AL, mo;
    if #M9 > 0 then local f5 = ({});
    for f1, z1 in q, M9 do
        do
            for Oe, se in q, z1 do
                if not(se[0X1] == u9 and se[0x0002] >= 0x00)
    then
    else local S0 = (se[2]);
    if not f5[S0] then f5[S0] = {
        u9[S0]
    }; end; do se[0X1] = f5[S0];
    end; se[2] = 0X1; end; end; end; end; end; until true;
    return mo[ai[0X1]];
    else mo[ai[1]] = Vo[ai[4]]; end; end; end;
    else
        do
            if ti < 0X00002c then(mo)[ai[1]] = {};
    else
        do
            if ti == 45 then local Ex = ai[0X3]; local wx = mo[Ex];
    for Xg = Ex + 0X00001, ai[0x2] do
        do wx = wx..mo[Xg];
        end;
    end; mo[ai[0x1]] = wx;
    else local D_ = (ai[0X0003]); local T_ = ai[0X001]; Io = T_ + D_ - 1; repeat local Lu, Ou = AL, (mo);
    if not(#Lu > 0) then
    else local iP = {};
    for sl, Xl in q, Lu do
        for hZ, VZ in q, Xl do
            do
                if VZ[0X1] ==
    Ou and VZ[0x2] >= 0 then local oK = VZ[0X00002];
    if not(not iP[oK]) then
    else(iP)[oK] = {
        Ou[oK]
    }; end; VZ[0X0001] = iP[oK]; VZ[0X2] = 1; end; end; end; end; end; until true; do return mo[T_](p(mo, T_ + 1, Io));
    end; end; end; end; end; end; end; end; elseif ti < 0x1F then
    if ti >= 28 then
    if not(ti >= 29) then mo[ai[1]][mo[ai[3]]] = mo[ai[0X2]];
    else if ti~ = 0X00001e then
    if mo[ai[3]] <= mo[ai[2]] then Jo = ai[1]; end;
    else local fZ = (ai[0X1]);
    (mo)[fZ] = mo[fZ](mo[fZ + 1], mo[fZ + 2]); do Io = fZ;
    end; end; end;
    else if ti < 0X1a then local x2 = (ai[0x01]); mo[x2] = mo[x2](p(mo, x2 + 0X1, Io)); Io = x2;
    else if ti~ = 0x0001b then mo[ai[0X1]] = mo[ai[3]][ai[0X7]];
    else(mo)[ai[0x00001]] = #mo[ai[0X003]]; end; end; end;
    else if not(ti >= 0X22) then
    if ti < 0X20 then(mo)[ai[0x001]] = b(mo[ai[3]], mo[ai[2]]);
    else if ti~ = 0X000021 then local pm = ((ai[0X2] - 1) * 50); local hm = ai[1]; local om = mo[hm]; do
        for DP = 1, ai[0X3] do
            do om[pm + DP] = mo[hm + DP];
            end;
        end;
    end;
    else
        do
            if not(not(mo[ai[3]] <= ai[7])) then
    else
        do Jo = ai[1];
        end; end; end; end; end;
    else if ti >= 35 then
    if ti~ = 36 then(mo)[ai[0X1]] = T(mo[ai[3]], mo[ai[2]]);
    else(mo)[ai[1]] = mo[ai[0X3]] % mo[ai[2]]; end;
    else
        do(mo)[ai[1]] = not mo[ai[0x00003]];
        end; end; end; end; end; end; end; end; E(IL, qL); do return IL;
    end; end; do Xj = 0X1;
    end; end; end; until Xj >= 3; local gj = oj();
    (cj)[Uj] = Bj; local c = tostring; Xj = 1; repeat
    if Xj == 0X00 then do return kj(nil, U, gj)(...);
    end;
    else Bj = nil; do Xj = 0X0;
    end; do continue;
    end; end; until false; end)(true, 4, string.sub, string.gsub, next, bit32.band, false, 3, bit32.bxor, 52, table.insert, 0X8, pcall, bit32, 1, unpack, tonumber, coroutine, 9, bit32.rshift, 0X5, bit32.bnot, string, getfenv, coroutine.wrap, assert, rawset, string.rep, nil, select, error, {
    62026,
    3528221296,
    0X35b73080,
    2367140511,
    0X0000791151,
    1954496077,
    0X5948250,
    764020764,
    0X009d38D8Ad
}, ...);
